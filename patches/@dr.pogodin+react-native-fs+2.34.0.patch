diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/buildConfig/debug/com/drpogodin/reactnativefs/BuildConfig.java b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/buildConfig/debug/com/drpogodin/reactnativefs/BuildConfig.java
new file mode 100644
index 0000000..1ebc139
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/buildConfig/debug/com/drpogodin/reactnativefs/BuildConfig.java
@@ -0,0 +1,10 @@
+/**
+ * Automatically generated file. DO NOT MODIFY
+ */
+package com.drpogodin.reactnativefs;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = Boolean.parseBoolean("true");
+  public static final String LIBRARY_PACKAGE_NAME = "com.drpogodin.reactnativefs";
+  public static final String BUILD_TYPE = "debug";
+}
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/java/com/drpogodin/reactnativefs/NativeReactNativeFsSpec.java b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/java/com/drpogodin/reactnativefs/NativeReactNativeFsSpec.java
new file mode 100644
index 0000000..65accaa
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/java/com/drpogodin/reactnativefs/NativeReactNativeFsSpec.java
@@ -0,0 +1,242 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJavaSpec.js
+ *
+ * @nolint
+ */
+
+package com.drpogodin.reactnativefs;
+
+import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.react.bridge.Promise;
+import com.facebook.react.bridge.ReactApplicationContext;
+import com.facebook.react.bridge.ReactContextBaseJavaModule;
+import com.facebook.react.bridge.ReactMethod;
+import com.facebook.react.bridge.ReadableMap;
+import com.facebook.react.common.build.ReactBuildConfig;
+import com.facebook.react.turbomodule.core.interfaces.TurboModule;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+public abstract class NativeReactNativeFsSpec extends ReactContextBaseJavaModule implements TurboModule {
+  public static final String NAME = "ReactNativeFs";
+
+  public NativeReactNativeFsSpec(ReactApplicationContext reactContext) {
+    super(reactContext);
+  }
+
+  @Override
+  public @Nonnull String getName() {
+    return NAME;
+  }
+
+  protected abstract Map<String, Object> getTypedExportedConstants();
+
+  @Override
+  @DoNotStrip
+  public final @Nullable Map<String, Object> getConstants() {
+    Map<String, Object> constants = getTypedExportedConstants();
+    if (ReactBuildConfig.DEBUG || ReactBuildConfig.IS_INTERNAL_BUILD) {
+      Set<String> obligatoryFlowConstants = new HashSet<>(Arrays.asList(
+          "CachesDirectoryPath",
+          "DocumentDirectory",
+          "DocumentDirectoryPath",
+          "DownloadDirectoryPath",
+          "ExternalCachesDirectoryPath",
+          "ExternalDirectoryPath",
+          "ExternalStorageDirectoryPath",
+          "FileTypeDirectory",
+          "FileTypeRegular",
+          "TemporaryDirectoryPath"
+      ));
+      Set<String> optionalFlowConstants = new HashSet<>(Arrays.asList(
+          "FileProtectionKeys",
+          "LibraryDirectoryPath",
+          "MainBundlePath",
+          "PicturesDirectoryPath",
+          "RoamingDirectoryPath"
+      ));
+      Set<String> undeclaredConstants = new HashSet<>(constants.keySet());
+      undeclaredConstants.removeAll(obligatoryFlowConstants);
+      undeclaredConstants.removeAll(optionalFlowConstants);
+      if (!undeclaredConstants.isEmpty()) {
+        throw new IllegalStateException(String.format("Native Module Flow doesn't declare constants: %s", undeclaredConstants));
+      }
+      undeclaredConstants = obligatoryFlowConstants;
+      undeclaredConstants.removeAll(constants.keySet());
+      if (!undeclaredConstants.isEmpty()) {
+        throw new IllegalStateException(String.format("Native Module doesn't fill in constants: %s", undeclaredConstants));
+      }
+    }
+    return constants;
+  }
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void addListener(String event);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void removeListeners(double count);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void appendFile(String path, String b64, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void copyFile(String from, String into, ReadableMap options, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void downloadFile(ReadableMap options, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void exists(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void getFSInfo(Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void hash(String path, String algorithm, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void mkdir(String path, ReadableMap options, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void moveFile(String from, String into, ReadableMap options, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void pickFile(ReadableMap options, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void read(String path, double length, double position, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void readFile(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void readDir(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void stat(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void stopDownload(double jobId);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void stopUpload(double jobId);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void touch(String path, ReadableMap options, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void unlink(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void uploadFiles(ReadableMap options, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void write(String path, String b64, double position, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void writeFile(String path, String b64, ReadableMap options, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void copyFileAssets(String from, String into, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void copyFileRes(String from, String into, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void existsAssets(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void existsRes(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void getAllExternalFilesDirs(Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void readFileAssets(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void readFileRes(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void readDirAssets(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void scanFile(String path, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void setReadable(String filepath, boolean readable, boolean ownerOnly, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void copyAssetsFileIOS(String imageUri, String destPath, double width, double height, double scale, double compression, String resizeMode, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void copyAssetsVideoIOS(String imageUri, String destPath, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void completeHandlerIOS(double jobId);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void isResumable(double jobId, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void pathForBundle(String bundle, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void pathForGroup(String group, Promise promise);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void resumeDownload(double jobId);
+
+  @ReactMethod
+  @DoNotStrip
+  public abstract void copyFolder(String from, String into, Promise promise);
+}
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/CMakeLists.txt b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/CMakeLists.txt
new file mode 100644
index 0000000..80e4857
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/CMakeLists.txt
@@ -0,0 +1,49 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+cmake_minimum_required(VERSION 3.13)
+set(CMAKE_VERBOSE_MAKEFILE on)
+
+file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/ReactNativeFsSpec/*.cpp)
+
+add_library(
+  react_codegen_ReactNativeFsSpec
+  SHARED
+  ${react_codegen_SRCS}
+)
+
+target_include_directories(react_codegen_ReactNativeFsSpec PUBLIC . react/renderer/components/ReactNativeFsSpec)
+
+target_link_libraries(
+  react_codegen_ReactNativeFsSpec
+  fbjni
+  folly_runtime
+  glog
+  jsi
+  react_codegen_rncore
+  react_debug
+  react_nativemodule_core
+  react_render_componentregistry
+  react_render_core
+  react_render_debug
+  react_render_graphics
+  react_render_imagemanager
+  react_render_mapbuffer
+  react_utils
+  rrc_image
+  rrc_view
+  turbomodulejsijni
+  yoga
+)
+
+target_compile_options(
+  react_codegen_ReactNativeFsSpec
+  PRIVATE
+  -DLOG_TAG=\"ReactNative\"
+  -fexceptions
+  -frtti
+  -std=c++20
+  -Wall
+)
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/ReactNativeFsSpec-generated.cpp b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/ReactNativeFsSpec-generated.cpp
new file mode 100644
index 0000000..35c81df
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/ReactNativeFsSpec-generated.cpp
@@ -0,0 +1,272 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJniCpp.js
+ */
+
+#include "ReactNativeFsSpec.h"
+
+namespace facebook::react {
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_getConstants(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, ObjectKind, "getConstants", "()Ljava/util/Map;", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_addListener(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "addListener", "(Ljava/lang/String;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_removeListeners(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "removeListeners", "(D)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_appendFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "appendFile", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "copyFile", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_downloadFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "downloadFile", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_exists(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "exists", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_getFSInfo(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getFSInfo", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_hash(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "hash", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_mkdir(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "mkdir", "(Ljava/lang/String;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_moveFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "moveFile", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_pickFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "pickFile", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_read(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "read", "(Ljava/lang/String;DDLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "readFile", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readDir(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "readDir", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_stat(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "stat", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_stopDownload(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "stopDownload", "(D)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_stopUpload(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "stopUpload", "(D)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_touch(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "touch", "(Ljava/lang/String;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_unlink(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "unlink", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_uploadFiles(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "uploadFiles", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_write(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "write", "(Ljava/lang/String;Ljava/lang/String;DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_writeFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "writeFile", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyFileAssets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "copyFileAssets", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyFileRes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "copyFileRes", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_existsAssets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "existsAssets", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_existsRes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "existsRes", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_getAllExternalFilesDirs(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getAllExternalFilesDirs", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readFileAssets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "readFileAssets", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readFileRes(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "readFileRes", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_readDirAssets(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "readDirAssets", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_scanFile(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "scanFile", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_setReadable(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "setReadable", "(Ljava/lang/String;ZZLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyAssetsFileIOS(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "copyAssetsFileIOS", "(Ljava/lang/String;Ljava/lang/String;DDDDLjava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyAssetsVideoIOS(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "copyAssetsVideoIOS", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_completeHandlerIOS(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "completeHandlerIOS", "(D)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_isResumable(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "isResumable", "(DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_pathForBundle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "pathForBundle", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_pathForGroup(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "pathForGroup", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_resumeDownload(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "resumeDownload", "(D)V", args, count, cachedMethodId);
+}
+
+static facebook::jsi::Value __hostFunction_NativeReactNativeFsSpecJSI_copyFolder(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
+  static jmethodID cachedMethodId = nullptr;
+  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "copyFolder", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
+}
+
+NativeReactNativeFsSpecJSI::NativeReactNativeFsSpecJSI(const JavaTurboModule::InitParams &params)
+  : JavaTurboModule(params) {
+  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsSpecJSI_getConstants};
+  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_addListener};
+  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_removeListeners};
+  methodMap_["appendFile"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_appendFile};
+  methodMap_["copyFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_copyFile};
+  methodMap_["downloadFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_downloadFile};
+  methodMap_["exists"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_exists};
+  methodMap_["getFSInfo"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsSpecJSI_getFSInfo};
+  methodMap_["hash"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_hash};
+  methodMap_["mkdir"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_mkdir};
+  methodMap_["moveFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_moveFile};
+  methodMap_["pickFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_pickFile};
+  methodMap_["read"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_read};
+  methodMap_["readFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readFile};
+  methodMap_["readDir"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readDir};
+  methodMap_["stat"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_stat};
+  methodMap_["stopDownload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_stopDownload};
+  methodMap_["stopUpload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_stopUpload};
+  methodMap_["touch"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_touch};
+  methodMap_["unlink"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_unlink};
+  methodMap_["uploadFiles"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_uploadFiles};
+  methodMap_["write"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_write};
+  methodMap_["writeFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_writeFile};
+  methodMap_["copyFileAssets"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_copyFileAssets};
+  methodMap_["copyFileRes"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_copyFileRes};
+  methodMap_["existsAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_existsAssets};
+  methodMap_["existsRes"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_existsRes};
+  methodMap_["getAllExternalFilesDirs"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsSpecJSI_getAllExternalFilesDirs};
+  methodMap_["readFileAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readFileAssets};
+  methodMap_["readFileRes"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readFileRes};
+  methodMap_["readDirAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_readDirAssets};
+  methodMap_["scanFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_scanFile};
+  methodMap_["setReadable"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsSpecJSI_setReadable};
+  methodMap_["copyAssetsFileIOS"] = MethodMetadata {7, __hostFunction_NativeReactNativeFsSpecJSI_copyAssetsFileIOS};
+  methodMap_["copyAssetsVideoIOS"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_copyAssetsVideoIOS};
+  methodMap_["completeHandlerIOS"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_completeHandlerIOS};
+  methodMap_["isResumable"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_isResumable};
+  methodMap_["pathForBundle"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_pathForBundle};
+  methodMap_["pathForGroup"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_pathForGroup};
+  methodMap_["resumeDownload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsSpecJSI_resumeDownload};
+  methodMap_["copyFolder"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsSpecJSI_copyFolder};
+}
+
+std::shared_ptr<TurboModule> ReactNativeFsSpec_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
+  if (moduleName == "ReactNativeFs") {
+    return std::make_shared<NativeReactNativeFsSpecJSI>(params);
+  }
+  return nullptr;
+}
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/ReactNativeFsSpec.h b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/ReactNativeFsSpec.h
new file mode 100644
index 0000000..f65c651
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/ReactNativeFsSpec.h
@@ -0,0 +1,31 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleJniH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/JavaTurboModule.h>
+#include <ReactCommon/TurboModule.h>
+#include <jsi/jsi.h>
+
+namespace facebook::react {
+
+/**
+ * JNI C++ class for module 'NativeReactNativeFs'
+ */
+class JSI_EXPORT NativeReactNativeFsSpecJSI : public JavaTurboModule {
+public:
+  NativeReactNativeFsSpecJSI(const JavaTurboModule::InitParams &params);
+};
+
+
+JSI_EXPORT
+std::shared_ptr<TurboModule> ReactNativeFsSpec_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params);
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ComponentDescriptors.cpp b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ComponentDescriptors.cpp
new file mode 100644
index 0000000..9dfd9e2
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ComponentDescriptors.cpp
@@ -0,0 +1,22 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorCpp.js
+ */
+
+#include <react/renderer/components/ReactNativeFsSpec/ComponentDescriptors.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+
+namespace facebook::react {
+
+void ReactNativeFsSpec_registerComponentDescriptorsFromCodegen(
+  std::shared_ptr<const ComponentDescriptorProviderRegistry> registry) {
+
+}
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ComponentDescriptors.h b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ComponentDescriptors.h
new file mode 100644
index 0000000..a607b2e
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ComponentDescriptors.h
@@ -0,0 +1,24 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateComponentDescriptorH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/ReactNativeFsSpec/ShadowNodes.h>
+#include <react/renderer/core/ConcreteComponentDescriptor.h>
+#include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
+
+namespace facebook::react {
+
+
+
+void ReactNativeFsSpec_registerComponentDescriptorsFromCodegen(
+  std::shared_ptr<const ComponentDescriptorProviderRegistry> registry);
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/EventEmitters.cpp b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/EventEmitters.cpp
new file mode 100644
index 0000000..e849bdb
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/EventEmitters.cpp
@@ -0,0 +1,16 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateEventEmitterCpp.js
+ */
+
+#include <react/renderer/components/ReactNativeFsSpec/EventEmitters.h>
+
+
+namespace facebook::react {
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/EventEmitters.h b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/EventEmitters.h
new file mode 100644
index 0000000..2845a63
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/EventEmitters.h
@@ -0,0 +1,17 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateEventEmitterH.js
+ */
+#pragma once
+
+#include <react/renderer/components/view/ViewEventEmitter.h>
+
+
+namespace facebook::react {
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/Props.cpp b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/Props.cpp
new file mode 100644
index 0000000..b0648f1
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/Props.cpp
@@ -0,0 +1,19 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GeneratePropsCpp.js
+ */
+
+#include <react/renderer/components/ReactNativeFsSpec/Props.h>
+#include <react/renderer/core/PropsParserContext.h>
+#include <react/renderer/core/propsConversions.h>
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/Props.h b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/Props.h
new file mode 100644
index 0000000..870864b
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/Props.h
@@ -0,0 +1,18 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GeneratePropsH.js
+ */
+#pragma once
+
+
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ReactNativeFsSpecJSI-generated.cpp b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ReactNativeFsSpecJSI-generated.cpp
new file mode 100644
index 0000000..510c2cd
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ReactNativeFsSpecJSI-generated.cpp
@@ -0,0 +1,336 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleCpp.js
+ */
+
+#include "ReactNativeFsSpecJSI.h"
+
+namespace facebook::react {
+
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->getConstants(
+    rt
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_addListener(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->addListener(
+    rt,
+    args[0].asString(rt)
+  );
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_removeListeners(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->removeListeners(
+    rt,
+    args[0].asNumber()
+  );
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_appendFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->appendFile(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_copyFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->copyFile(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt),
+    args[2].asObject(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_downloadFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->downloadFile(
+    rt,
+    args[0].asObject(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_exists(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->exists(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_getFSInfo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->getFSInfo(
+    rt
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_hash(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->hash(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_mkdir(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->mkdir(
+    rt,
+    args[0].asString(rt),
+    args[1].asObject(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_moveFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->moveFile(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt),
+    args[2].asObject(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_pickFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->pickFile(
+    rt,
+    args[0].asObject(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_read(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->read(
+    rt,
+    args[0].asString(rt),
+    args[1].asNumber(),
+    args[2].asNumber()
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_readFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->readFile(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_readDir(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->readDir(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_stat(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->stat(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_stopDownload(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->stopDownload(
+    rt,
+    args[0].asNumber()
+  );
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_stopUpload(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->stopUpload(
+    rt,
+    args[0].asNumber()
+  );
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_touch(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->touch(
+    rt,
+    args[0].asString(rt),
+    args[1].asObject(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_unlink(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->unlink(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_uploadFiles(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->uploadFiles(
+    rt,
+    args[0].asObject(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_write(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->write(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt),
+    args[2].asNumber()
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_writeFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->writeFile(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt),
+    args[2].asObject(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_copyFileAssets(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->copyFileAssets(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_copyFileRes(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->copyFileRes(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_existsAssets(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->existsAssets(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_existsRes(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->existsRes(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_getAllExternalFilesDirs(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->getAllExternalFilesDirs(
+    rt
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_readFileAssets(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->readFileAssets(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_readFileRes(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->readFileRes(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_readDirAssets(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->readDirAssets(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_scanFile(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->scanFile(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_setReadable(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->setReadable(
+    rt,
+    args[0].asString(rt),
+    args[1].asBool(),
+    args[2].asBool()
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_copyAssetsFileIOS(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->copyAssetsFileIOS(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt),
+    args[2].asNumber(),
+    args[3].asNumber(),
+    args[4].asNumber(),
+    args[5].asNumber(),
+    args[6].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_copyAssetsVideoIOS(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->copyAssetsVideoIOS(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_completeHandlerIOS(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->completeHandlerIOS(
+    rt,
+    args[0].asNumber()
+  );
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_isResumable(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->isResumable(
+    rt,
+    args[0].asNumber()
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_pathForBundle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->pathForBundle(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_pathForGroup(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->pathForGroup(
+    rt,
+    args[0].asString(rt)
+  );
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_resumeDownload(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->resumeDownload(
+    rt,
+    args[0].asNumber()
+  );
+  return jsi::Value::undefined();
+}
+static jsi::Value __hostFunction_NativeReactNativeFsCxxSpecJSI_copyFolder(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
+  return static_cast<NativeReactNativeFsCxxSpecJSI *>(&turboModule)->copyFolder(
+    rt,
+    args[0].asString(rt),
+    args[1].asString(rt)
+  );
+}
+
+NativeReactNativeFsCxxSpecJSI::NativeReactNativeFsCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
+  : TurboModule("ReactNativeFs", jsInvoker) {
+  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsCxxSpecJSI_getConstants};
+  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_addListener};
+  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_removeListeners};
+  methodMap_["appendFile"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsCxxSpecJSI_appendFile};
+  methodMap_["copyFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsCxxSpecJSI_copyFile};
+  methodMap_["downloadFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_downloadFile};
+  methodMap_["exists"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_exists};
+  methodMap_["getFSInfo"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsCxxSpecJSI_getFSInfo};
+  methodMap_["hash"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsCxxSpecJSI_hash};
+  methodMap_["mkdir"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsCxxSpecJSI_mkdir};
+  methodMap_["moveFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsCxxSpecJSI_moveFile};
+  methodMap_["pickFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_pickFile};
+  methodMap_["read"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsCxxSpecJSI_read};
+  methodMap_["readFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_readFile};
+  methodMap_["readDir"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_readDir};
+  methodMap_["stat"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_stat};
+  methodMap_["stopDownload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_stopDownload};
+  methodMap_["stopUpload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_stopUpload};
+  methodMap_["touch"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsCxxSpecJSI_touch};
+  methodMap_["unlink"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_unlink};
+  methodMap_["uploadFiles"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_uploadFiles};
+  methodMap_["write"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsCxxSpecJSI_write};
+  methodMap_["writeFile"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsCxxSpecJSI_writeFile};
+  methodMap_["copyFileAssets"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsCxxSpecJSI_copyFileAssets};
+  methodMap_["copyFileRes"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsCxxSpecJSI_copyFileRes};
+  methodMap_["existsAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_existsAssets};
+  methodMap_["existsRes"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_existsRes};
+  methodMap_["getAllExternalFilesDirs"] = MethodMetadata {0, __hostFunction_NativeReactNativeFsCxxSpecJSI_getAllExternalFilesDirs};
+  methodMap_["readFileAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_readFileAssets};
+  methodMap_["readFileRes"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_readFileRes};
+  methodMap_["readDirAssets"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_readDirAssets};
+  methodMap_["scanFile"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_scanFile};
+  methodMap_["setReadable"] = MethodMetadata {3, __hostFunction_NativeReactNativeFsCxxSpecJSI_setReadable};
+  methodMap_["copyAssetsFileIOS"] = MethodMetadata {7, __hostFunction_NativeReactNativeFsCxxSpecJSI_copyAssetsFileIOS};
+  methodMap_["copyAssetsVideoIOS"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsCxxSpecJSI_copyAssetsVideoIOS};
+  methodMap_["completeHandlerIOS"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_completeHandlerIOS};
+  methodMap_["isResumable"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_isResumable};
+  methodMap_["pathForBundle"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_pathForBundle};
+  methodMap_["pathForGroup"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_pathForGroup};
+  methodMap_["resumeDownload"] = MethodMetadata {1, __hostFunction_NativeReactNativeFsCxxSpecJSI_resumeDownload};
+  methodMap_["copyFolder"] = MethodMetadata {2, __hostFunction_NativeReactNativeFsCxxSpecJSI_copyFolder};
+}
+
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ReactNativeFsSpecJSI.h b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ReactNativeFsSpecJSI.h
new file mode 100644
index 0000000..74f5ebb
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ReactNativeFsSpecJSI.h
@@ -0,0 +1,1953 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateModuleH.js
+ */
+
+#pragma once
+
+#include <ReactCommon/TurboModule.h>
+#include <react/bridging/Bridging.h>
+
+namespace facebook::react {
+
+
+  
+#pragma mark - ReactNativeFsBaseFileOptionsT
+
+template <typename P0>
+struct [[deprecated("Use ReactNativeFsFileOptionsT instead.")]] ReactNativeFsBaseFileOptionsT {
+  P0 NSFileProtectionKey;
+  bool operator==(const ReactNativeFsBaseFileOptionsT &other) const {
+    return NSFileProtectionKey == other.NSFileProtectionKey;
+  }
+};
+
+template <typename P0>
+struct [[deprecated("Use ReactNativeFsFileOptionsTBridging instead.")]] ReactNativeFsBaseFileOptionsTBridging {
+  static ReactNativeFsBaseFileOptionsT<P0> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseFileOptionsT<P0> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "NSFileProtectionKey"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static jsi::String NSFileProtectionKeyToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseFileOptionsT<P0> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    if (value.NSFileProtectionKey) {
+      result.setProperty(rt, "NSFileProtectionKey", bridging::toJs(rt, value.NSFileProtectionKey.value(), jsInvoker));
+    }
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseNativeDownloadFileOptionsT
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14>
+struct [[deprecated("Use ReactNativeFsNativeDownloadFileOptionsT instead.")]] ReactNativeFsBaseNativeDownloadFileOptionsT {
+  P0 jobId;
+  P1 fromUrl;
+  P2 toFile;
+  P3 background;
+  P4 backgroundTimeout;
+  P5 cacheable;
+  P6 connectionTimeout;
+  P7 discretionary;
+  P8 headers;
+  P9 progressDivider;
+  P10 progressInterval;
+  P11 readTimeout;
+  P12 hasBeginCallback;
+  P13 hasProgressCallback;
+  P14 hasResumableCallback;
+  bool operator==(const ReactNativeFsBaseNativeDownloadFileOptionsT &other) const {
+    return jobId == other.jobId && fromUrl == other.fromUrl && toFile == other.toFile && background == other.background && backgroundTimeout == other.backgroundTimeout && cacheable == other.cacheable && connectionTimeout == other.connectionTimeout && discretionary == other.discretionary && headers == other.headers && progressDivider == other.progressDivider && progressInterval == other.progressInterval && readTimeout == other.readTimeout && hasBeginCallback == other.hasBeginCallback && hasProgressCallback == other.hasProgressCallback && hasResumableCallback == other.hasResumableCallback;
+  }
+};
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14>
+struct [[deprecated("Use ReactNativeFsNativeDownloadFileOptionsTBridging instead.")]] ReactNativeFsBaseNativeDownloadFileOptionsTBridging {
+  static ReactNativeFsBaseNativeDownloadFileOptionsT<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseNativeDownloadFileOptionsT<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "jobId"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "fromUrl"), jsInvoker),
+      bridging::fromJs<P2>(rt, value.getProperty(rt, "toFile"), jsInvoker),
+      bridging::fromJs<P3>(rt, value.getProperty(rt, "background"), jsInvoker),
+      bridging::fromJs<P4>(rt, value.getProperty(rt, "backgroundTimeout"), jsInvoker),
+      bridging::fromJs<P5>(rt, value.getProperty(rt, "cacheable"), jsInvoker),
+      bridging::fromJs<P6>(rt, value.getProperty(rt, "connectionTimeout"), jsInvoker),
+      bridging::fromJs<P7>(rt, value.getProperty(rt, "discretionary"), jsInvoker),
+      bridging::fromJs<P8>(rt, value.getProperty(rt, "headers"), jsInvoker),
+      bridging::fromJs<P9>(rt, value.getProperty(rt, "progressDivider"), jsInvoker),
+      bridging::fromJs<P10>(rt, value.getProperty(rt, "progressInterval"), jsInvoker),
+      bridging::fromJs<P11>(rt, value.getProperty(rt, "readTimeout"), jsInvoker),
+      bridging::fromJs<P12>(rt, value.getProperty(rt, "hasBeginCallback"), jsInvoker),
+      bridging::fromJs<P13>(rt, value.getProperty(rt, "hasProgressCallback"), jsInvoker),
+      bridging::fromJs<P14>(rt, value.getProperty(rt, "hasResumableCallback"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double jobIdToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String fromUrlToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String toFileToJs(jsi::Runtime &rt, P2 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool backgroundToJs(jsi::Runtime &rt, P3 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double backgroundTimeoutToJs(jsi::Runtime &rt, P4 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool cacheableToJs(jsi::Runtime &rt, P5 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double connectionTimeoutToJs(jsi::Runtime &rt, P6 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool discretionaryToJs(jsi::Runtime &rt, P7 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Object headersToJs(jsi::Runtime &rt, P8 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double progressDividerToJs(jsi::Runtime &rt, P9 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double progressIntervalToJs(jsi::Runtime &rt, P10 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double readTimeoutToJs(jsi::Runtime &rt, P11 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasBeginCallbackToJs(jsi::Runtime &rt, P12 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasProgressCallbackToJs(jsi::Runtime &rt, P13 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasResumableCallbackToJs(jsi::Runtime &rt, P14 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseNativeDownloadFileOptionsT<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "jobId", bridging::toJs(rt, value.jobId, jsInvoker));
+    result.setProperty(rt, "fromUrl", bridging::toJs(rt, value.fromUrl, jsInvoker));
+    result.setProperty(rt, "toFile", bridging::toJs(rt, value.toFile, jsInvoker));
+    result.setProperty(rt, "background", bridging::toJs(rt, value.background, jsInvoker));
+    result.setProperty(rt, "backgroundTimeout", bridging::toJs(rt, value.backgroundTimeout, jsInvoker));
+    result.setProperty(rt, "cacheable", bridging::toJs(rt, value.cacheable, jsInvoker));
+    result.setProperty(rt, "connectionTimeout", bridging::toJs(rt, value.connectionTimeout, jsInvoker));
+    result.setProperty(rt, "discretionary", bridging::toJs(rt, value.discretionary, jsInvoker));
+    result.setProperty(rt, "headers", bridging::toJs(rt, value.headers, jsInvoker));
+    result.setProperty(rt, "progressDivider", bridging::toJs(rt, value.progressDivider, jsInvoker));
+    result.setProperty(rt, "progressInterval", bridging::toJs(rt, value.progressInterval, jsInvoker));
+    result.setProperty(rt, "readTimeout", bridging::toJs(rt, value.readTimeout, jsInvoker));
+    result.setProperty(rt, "hasBeginCallback", bridging::toJs(rt, value.hasBeginCallback, jsInvoker));
+    result.setProperty(rt, "hasProgressCallback", bridging::toJs(rt, value.hasProgressCallback, jsInvoker));
+    result.setProperty(rt, "hasResumableCallback", bridging::toJs(rt, value.hasResumableCallback, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseDownloadResultT
+
+template <typename P0, typename P1, typename P2>
+struct [[deprecated("Use ReactNativeFsDownloadResultT instead.")]] ReactNativeFsBaseDownloadResultT {
+  P0 jobId;
+  P1 statusCode;
+  P2 bytesWritten;
+  bool operator==(const ReactNativeFsBaseDownloadResultT &other) const {
+    return jobId == other.jobId && statusCode == other.statusCode && bytesWritten == other.bytesWritten;
+  }
+};
+
+template <typename P0, typename P1, typename P2>
+struct [[deprecated("Use ReactNativeFsDownloadResultTBridging instead.")]] ReactNativeFsBaseDownloadResultTBridging {
+  static ReactNativeFsBaseDownloadResultT<P0, P1, P2> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseDownloadResultT<P0, P1, P2> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "jobId"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "statusCode"), jsInvoker),
+      bridging::fromJs<P2>(rt, value.getProperty(rt, "bytesWritten"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double jobIdToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double statusCodeToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double bytesWrittenToJs(jsi::Runtime &rt, P2 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseDownloadResultT<P0, P1, P2> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "jobId", bridging::toJs(rt, value.jobId, jsInvoker));
+    result.setProperty(rt, "statusCode", bridging::toJs(rt, value.statusCode, jsInvoker));
+    result.setProperty(rt, "bytesWritten", bridging::toJs(rt, value.bytesWritten, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseFSInfoResultT
+
+template <typename P0, typename P1, typename P2, typename P3>
+struct [[deprecated("Use ReactNativeFsFSInfoResultT instead.")]] ReactNativeFsBaseFSInfoResultT {
+  P0 totalSpace;
+  P1 totalSpaceEx;
+  P2 freeSpace;
+  P3 freeSpaceEx;
+  bool operator==(const ReactNativeFsBaseFSInfoResultT &other) const {
+    return totalSpace == other.totalSpace && totalSpaceEx == other.totalSpaceEx && freeSpace == other.freeSpace && freeSpaceEx == other.freeSpaceEx;
+  }
+};
+
+template <typename P0, typename P1, typename P2, typename P3>
+struct [[deprecated("Use ReactNativeFsFSInfoResultTBridging instead.")]] ReactNativeFsBaseFSInfoResultTBridging {
+  static ReactNativeFsBaseFSInfoResultT<P0, P1, P2, P3> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseFSInfoResultT<P0, P1, P2, P3> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "totalSpace"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "totalSpaceEx"), jsInvoker),
+      bridging::fromJs<P2>(rt, value.getProperty(rt, "freeSpace"), jsInvoker),
+      bridging::fromJs<P3>(rt, value.getProperty(rt, "freeSpaceEx"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double totalSpaceToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double totalSpaceExToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double freeSpaceToJs(jsi::Runtime &rt, P2 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double freeSpaceExToJs(jsi::Runtime &rt, P3 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseFSInfoResultT<P0, P1, P2, P3> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "totalSpace", bridging::toJs(rt, value.totalSpace, jsInvoker));
+    result.setProperty(rt, "totalSpaceEx", bridging::toJs(rt, value.totalSpaceEx, jsInvoker));
+    result.setProperty(rt, "freeSpace", bridging::toJs(rt, value.freeSpace, jsInvoker));
+    result.setProperty(rt, "freeSpaceEx", bridging::toJs(rt, value.freeSpaceEx, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseMkdirOptionsT
+
+template <typename P0, typename P1>
+struct [[deprecated("Use ReactNativeFsMkdirOptionsT instead.")]] ReactNativeFsBaseMkdirOptionsT {
+  P0 NSURLIsExcludedFromBackupKey;
+  P1 NSFileProtectionKey;
+  bool operator==(const ReactNativeFsBaseMkdirOptionsT &other) const {
+    return NSURLIsExcludedFromBackupKey == other.NSURLIsExcludedFromBackupKey && NSFileProtectionKey == other.NSFileProtectionKey;
+  }
+};
+
+template <typename P0, typename P1>
+struct [[deprecated("Use ReactNativeFsMkdirOptionsTBridging instead.")]] ReactNativeFsBaseMkdirOptionsTBridging {
+  static ReactNativeFsBaseMkdirOptionsT<P0, P1> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseMkdirOptionsT<P0, P1> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "NSURLIsExcludedFromBackupKey"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "NSFileProtectionKey"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static bool NSURLIsExcludedFromBackupKeyToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String NSFileProtectionKeyToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseMkdirOptionsT<P0, P1> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    if (value.NSURLIsExcludedFromBackupKey) {
+      result.setProperty(rt, "NSURLIsExcludedFromBackupKey", bridging::toJs(rt, value.NSURLIsExcludedFromBackupKey.value(), jsInvoker));
+    }
+    if (value.NSFileProtectionKey) {
+      result.setProperty(rt, "NSFileProtectionKey", bridging::toJs(rt, value.NSFileProtectionKey.value(), jsInvoker));
+    }
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBasePickFileOptionsT
+
+template <typename P0, typename P1, typename P2>
+struct [[deprecated("Use ReactNativeFsPickFileOptionsT instead.")]] ReactNativeFsBasePickFileOptionsT {
+  P0 mimeTypes;
+  P1 pickerType;
+  P2 fileExtensions;
+  bool operator==(const ReactNativeFsBasePickFileOptionsT &other) const {
+    return mimeTypes == other.mimeTypes && pickerType == other.pickerType && fileExtensions == other.fileExtensions;
+  }
+};
+
+template <typename P0, typename P1, typename P2>
+struct [[deprecated("Use ReactNativeFsPickFileOptionsTBridging instead.")]] ReactNativeFsBasePickFileOptionsTBridging {
+  static ReactNativeFsBasePickFileOptionsT<P0, P1, P2> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBasePickFileOptionsT<P0, P1, P2> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "mimeTypes"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "pickerType"), jsInvoker),
+      bridging::fromJs<P2>(rt, value.getProperty(rt, "fileExtensions"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static jsi::Array mimeTypesToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String pickerTypeToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Array fileExtensionsToJs(jsi::Runtime &rt, P2 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBasePickFileOptionsT<P0, P1, P2> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "mimeTypes", bridging::toJs(rt, value.mimeTypes, jsInvoker));
+    result.setProperty(rt, "pickerType", bridging::toJs(rt, value.pickerType, jsInvoker));
+    result.setProperty(rt, "fileExtensions", bridging::toJs(rt, value.fileExtensions, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseNativeReadDirResItemT
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
+struct [[deprecated("Use ReactNativeFsNativeReadDirResItemT instead.")]] ReactNativeFsBaseNativeReadDirResItemT {
+  P0 ctime;
+  P1 mtime;
+  P2 name;
+  P3 path;
+  P4 size;
+  P5 type;
+  bool operator==(const ReactNativeFsBaseNativeReadDirResItemT &other) const {
+    return ctime == other.ctime && mtime == other.mtime && name == other.name && path == other.path && size == other.size && type == other.type;
+  }
+};
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
+struct [[deprecated("Use ReactNativeFsNativeReadDirResItemTBridging instead.")]] ReactNativeFsBaseNativeReadDirResItemTBridging {
+  static ReactNativeFsBaseNativeReadDirResItemT<P0, P1, P2, P3, P4, P5> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseNativeReadDirResItemT<P0, P1, P2, P3, P4, P5> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "ctime"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "mtime"), jsInvoker),
+      bridging::fromJs<P2>(rt, value.getProperty(rt, "name"), jsInvoker),
+      bridging::fromJs<P3>(rt, value.getProperty(rt, "path"), jsInvoker),
+      bridging::fromJs<P4>(rt, value.getProperty(rt, "size"), jsInvoker),
+      bridging::fromJs<P5>(rt, value.getProperty(rt, "type"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double ctimeToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double mtimeToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String nameToJs(jsi::Runtime &rt, P2 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String pathToJs(jsi::Runtime &rt, P3 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double sizeToJs(jsi::Runtime &rt, P4 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String typeToJs(jsi::Runtime &rt, P5 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseNativeReadDirResItemT<P0, P1, P2, P3, P4, P5> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "ctime", bridging::toJs(rt, value.ctime, jsInvoker));
+    result.setProperty(rt, "mtime", bridging::toJs(rt, value.mtime, jsInvoker));
+    result.setProperty(rt, "name", bridging::toJs(rt, value.name, jsInvoker));
+    result.setProperty(rt, "path", bridging::toJs(rt, value.path, jsInvoker));
+    result.setProperty(rt, "size", bridging::toJs(rt, value.size, jsInvoker));
+    result.setProperty(rt, "type", bridging::toJs(rt, value.type, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseNativeStatResultT
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
+struct [[deprecated("Use ReactNativeFsNativeStatResultT instead.")]] ReactNativeFsBaseNativeStatResultT {
+  P0 ctime;
+  P1 mtime;
+  P2 size;
+  P3 type;
+  P4 mode;
+  P5 originalFilepath;
+  bool operator==(const ReactNativeFsBaseNativeStatResultT &other) const {
+    return ctime == other.ctime && mtime == other.mtime && size == other.size && type == other.type && mode == other.mode && originalFilepath == other.originalFilepath;
+  }
+};
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
+struct [[deprecated("Use ReactNativeFsNativeStatResultTBridging instead.")]] ReactNativeFsBaseNativeStatResultTBridging {
+  static ReactNativeFsBaseNativeStatResultT<P0, P1, P2, P3, P4, P5> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseNativeStatResultT<P0, P1, P2, P3, P4, P5> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "ctime"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "mtime"), jsInvoker),
+      bridging::fromJs<P2>(rt, value.getProperty(rt, "size"), jsInvoker),
+      bridging::fromJs<P3>(rt, value.getProperty(rt, "type"), jsInvoker),
+      bridging::fromJs<P4>(rt, value.getProperty(rt, "mode"), jsInvoker),
+      bridging::fromJs<P5>(rt, value.getProperty(rt, "originalFilepath"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double ctimeToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double mtimeToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double sizeToJs(jsi::Runtime &rt, P2 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String typeToJs(jsi::Runtime &rt, P3 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double modeToJs(jsi::Runtime &rt, P4 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String originalFilepathToJs(jsi::Runtime &rt, P5 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseNativeStatResultT<P0, P1, P2, P3, P4, P5> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "ctime", bridging::toJs(rt, value.ctime, jsInvoker));
+    result.setProperty(rt, "mtime", bridging::toJs(rt, value.mtime, jsInvoker));
+    result.setProperty(rt, "size", bridging::toJs(rt, value.size, jsInvoker));
+    result.setProperty(rt, "type", bridging::toJs(rt, value.type, jsInvoker));
+    result.setProperty(rt, "mode", bridging::toJs(rt, value.mode, jsInvoker));
+    result.setProperty(rt, "originalFilepath", bridging::toJs(rt, value.originalFilepath, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseTouchOptions
+
+template <typename P0, typename P1>
+struct [[deprecated("Use ReactNativeFsTouchOptions instead.")]] ReactNativeFsBaseTouchOptions {
+  P0 ctime;
+  P1 mtime;
+  bool operator==(const ReactNativeFsBaseTouchOptions &other) const {
+    return ctime == other.ctime && mtime == other.mtime;
+  }
+};
+
+template <typename P0, typename P1>
+struct [[deprecated("Use ReactNativeFsTouchOptionsBridging instead.")]] ReactNativeFsBaseTouchOptionsBridging {
+  static ReactNativeFsBaseTouchOptions<P0, P1> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseTouchOptions<P0, P1> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "ctime"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "mtime"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double ctimeToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double mtimeToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseTouchOptions<P0, P1> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    if (value.ctime) {
+      result.setProperty(rt, "ctime", bridging::toJs(rt, value.ctime.value(), jsInvoker));
+    }
+    if (value.mtime) {
+      result.setProperty(rt, "mtime", bridging::toJs(rt, value.mtime.value(), jsInvoker));
+    }
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseNativeUploadFileOptionsT
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8>
+struct [[deprecated("Use ReactNativeFsNativeUploadFileOptionsT instead.")]] ReactNativeFsBaseNativeUploadFileOptionsT {
+  P0 jobId;
+  P1 toUrl;
+  P2 binaryStreamOnly;
+  P3 files;
+  P4 headers;
+  P5 fields;
+  P6 method;
+  P7 hasBeginCallback;
+  P8 hasProgressCallback;
+  bool operator==(const ReactNativeFsBaseNativeUploadFileOptionsT &other) const {
+    return jobId == other.jobId && toUrl == other.toUrl && binaryStreamOnly == other.binaryStreamOnly && files == other.files && headers == other.headers && fields == other.fields && method == other.method && hasBeginCallback == other.hasBeginCallback && hasProgressCallback == other.hasProgressCallback;
+  }
+};
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8>
+struct [[deprecated("Use ReactNativeFsNativeUploadFileOptionsTBridging instead.")]] ReactNativeFsBaseNativeUploadFileOptionsTBridging {
+  static ReactNativeFsBaseNativeUploadFileOptionsT<P0, P1, P2, P3, P4, P5, P6, P7, P8> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseNativeUploadFileOptionsT<P0, P1, P2, P3, P4, P5, P6, P7, P8> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "jobId"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "toUrl"), jsInvoker),
+      bridging::fromJs<P2>(rt, value.getProperty(rt, "binaryStreamOnly"), jsInvoker),
+      bridging::fromJs<P3>(rt, value.getProperty(rt, "files"), jsInvoker),
+      bridging::fromJs<P4>(rt, value.getProperty(rt, "headers"), jsInvoker),
+      bridging::fromJs<P5>(rt, value.getProperty(rt, "fields"), jsInvoker),
+      bridging::fromJs<P6>(rt, value.getProperty(rt, "method"), jsInvoker),
+      bridging::fromJs<P7>(rt, value.getProperty(rt, "hasBeginCallback"), jsInvoker),
+      bridging::fromJs<P8>(rt, value.getProperty(rt, "hasProgressCallback"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double jobIdToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String toUrlToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool binaryStreamOnlyToJs(jsi::Runtime &rt, P2 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Array filesToJs(jsi::Runtime &rt, P3 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Object headersToJs(jsi::Runtime &rt, P4 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Object fieldsToJs(jsi::Runtime &rt, P5 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String methodToJs(jsi::Runtime &rt, P6 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasBeginCallbackToJs(jsi::Runtime &rt, P7 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasProgressCallbackToJs(jsi::Runtime &rt, P8 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseNativeUploadFileOptionsT<P0, P1, P2, P3, P4, P5, P6, P7, P8> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "jobId", bridging::toJs(rt, value.jobId, jsInvoker));
+    result.setProperty(rt, "toUrl", bridging::toJs(rt, value.toUrl, jsInvoker));
+    if (value.binaryStreamOnly) {
+      result.setProperty(rt, "binaryStreamOnly", bridging::toJs(rt, value.binaryStreamOnly.value(), jsInvoker));
+    }
+    result.setProperty(rt, "files", bridging::toJs(rt, value.files, jsInvoker));
+    if (value.headers) {
+      result.setProperty(rt, "headers", bridging::toJs(rt, value.headers.value(), jsInvoker));
+    }
+    if (value.fields) {
+      result.setProperty(rt, "fields", bridging::toJs(rt, value.fields.value(), jsInvoker));
+    }
+    if (value.method) {
+      result.setProperty(rt, "method", bridging::toJs(rt, value.method.value(), jsInvoker));
+    }
+    result.setProperty(rt, "hasBeginCallback", bridging::toJs(rt, value.hasBeginCallback, jsInvoker));
+    result.setProperty(rt, "hasProgressCallback", bridging::toJs(rt, value.hasProgressCallback, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsBaseUploadResultT
+
+template <typename P0, typename P1, typename P2, typename P3>
+struct [[deprecated("Use ReactNativeFsUploadResultT instead.")]] ReactNativeFsBaseUploadResultT {
+  P0 jobId;
+  P1 statusCode;
+  P2 headers;
+  P3 body;
+  bool operator==(const ReactNativeFsBaseUploadResultT &other) const {
+    return jobId == other.jobId && statusCode == other.statusCode && headers == other.headers && body == other.body;
+  }
+};
+
+template <typename P0, typename P1, typename P2, typename P3>
+struct [[deprecated("Use ReactNativeFsUploadResultTBridging instead.")]] ReactNativeFsBaseUploadResultTBridging {
+  static ReactNativeFsBaseUploadResultT<P0, P1, P2, P3> fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    ReactNativeFsBaseUploadResultT<P0, P1, P2, P3> result{
+      bridging::fromJs<P0>(rt, value.getProperty(rt, "jobId"), jsInvoker),
+      bridging::fromJs<P1>(rt, value.getProperty(rt, "statusCode"), jsInvoker),
+      bridging::fromJs<P2>(rt, value.getProperty(rt, "headers"), jsInvoker),
+      bridging::fromJs<P3>(rt, value.getProperty(rt, "body"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double jobIdToJs(jsi::Runtime &rt, P0 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double statusCodeToJs(jsi::Runtime &rt, P1 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Object headersToJs(jsi::Runtime &rt, P2 value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String bodyToJs(jsi::Runtime &rt, P3 value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const ReactNativeFsBaseUploadResultT<P0, P1, P2, P3> &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "jobId", bridging::toJs(rt, value.jobId, jsInvoker));
+    result.setProperty(rt, "statusCode", bridging::toJs(rt, value.statusCode, jsInvoker));
+    result.setProperty(rt, "headers", bridging::toJs(rt, value.headers, jsInvoker));
+    result.setProperty(rt, "body", bridging::toJs(rt, value.body, jsInvoker));
+    return result;
+  }
+};
+
+
+#pragma mark - ReactNativeFsFileOptionsT
+
+template <typename P0>
+struct ReactNativeFsFileOptionsT {
+  P0 NSFileProtectionKey;
+  bool operator==(const ReactNativeFsFileOptionsT &other) const {
+    return NSFileProtectionKey == other.NSFileProtectionKey;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsFileOptionsTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.NSFileProtectionKey)>(rt, value.getProperty(rt, "NSFileProtectionKey"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static jsi::String NSFileProtectionKeyToJs(jsi::Runtime &rt, decltype(types.NSFileProtectionKey) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    if (value.NSFileProtectionKey) {
+      result.setProperty(rt, "NSFileProtectionKey", bridging::toJs(rt, value.NSFileProtectionKey.value(), jsInvoker));
+    }
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsNativeDownloadFileOptionsT
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8, typename P9, typename P10, typename P11, typename P12, typename P13, typename P14>
+struct ReactNativeFsNativeDownloadFileOptionsT {
+  P0 jobId;
+  P1 fromUrl;
+  P2 toFile;
+  P3 background;
+  P4 backgroundTimeout;
+  P5 cacheable;
+  P6 connectionTimeout;
+  P7 discretionary;
+  P8 headers;
+  P9 progressDivider;
+  P10 progressInterval;
+  P11 readTimeout;
+  P12 hasBeginCallback;
+  P13 hasProgressCallback;
+  P14 hasResumableCallback;
+  bool operator==(const ReactNativeFsNativeDownloadFileOptionsT &other) const {
+    return jobId == other.jobId && fromUrl == other.fromUrl && toFile == other.toFile && background == other.background && backgroundTimeout == other.backgroundTimeout && cacheable == other.cacheable && connectionTimeout == other.connectionTimeout && discretionary == other.discretionary && headers == other.headers && progressDivider == other.progressDivider && progressInterval == other.progressInterval && readTimeout == other.readTimeout && hasBeginCallback == other.hasBeginCallback && hasProgressCallback == other.hasProgressCallback && hasResumableCallback == other.hasResumableCallback;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsNativeDownloadFileOptionsTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.jobId)>(rt, value.getProperty(rt, "jobId"), jsInvoker),
+      bridging::fromJs<decltype(types.fromUrl)>(rt, value.getProperty(rt, "fromUrl"), jsInvoker),
+      bridging::fromJs<decltype(types.toFile)>(rt, value.getProperty(rt, "toFile"), jsInvoker),
+      bridging::fromJs<decltype(types.background)>(rt, value.getProperty(rt, "background"), jsInvoker),
+      bridging::fromJs<decltype(types.backgroundTimeout)>(rt, value.getProperty(rt, "backgroundTimeout"), jsInvoker),
+      bridging::fromJs<decltype(types.cacheable)>(rt, value.getProperty(rt, "cacheable"), jsInvoker),
+      bridging::fromJs<decltype(types.connectionTimeout)>(rt, value.getProperty(rt, "connectionTimeout"), jsInvoker),
+      bridging::fromJs<decltype(types.discretionary)>(rt, value.getProperty(rt, "discretionary"), jsInvoker),
+      bridging::fromJs<decltype(types.headers)>(rt, value.getProperty(rt, "headers"), jsInvoker),
+      bridging::fromJs<decltype(types.progressDivider)>(rt, value.getProperty(rt, "progressDivider"), jsInvoker),
+      bridging::fromJs<decltype(types.progressInterval)>(rt, value.getProperty(rt, "progressInterval"), jsInvoker),
+      bridging::fromJs<decltype(types.readTimeout)>(rt, value.getProperty(rt, "readTimeout"), jsInvoker),
+      bridging::fromJs<decltype(types.hasBeginCallback)>(rt, value.getProperty(rt, "hasBeginCallback"), jsInvoker),
+      bridging::fromJs<decltype(types.hasProgressCallback)>(rt, value.getProperty(rt, "hasProgressCallback"), jsInvoker),
+      bridging::fromJs<decltype(types.hasResumableCallback)>(rt, value.getProperty(rt, "hasResumableCallback"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double jobIdToJs(jsi::Runtime &rt, decltype(types.jobId) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String fromUrlToJs(jsi::Runtime &rt, decltype(types.fromUrl) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String toFileToJs(jsi::Runtime &rt, decltype(types.toFile) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool backgroundToJs(jsi::Runtime &rt, decltype(types.background) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double backgroundTimeoutToJs(jsi::Runtime &rt, decltype(types.backgroundTimeout) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool cacheableToJs(jsi::Runtime &rt, decltype(types.cacheable) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double connectionTimeoutToJs(jsi::Runtime &rt, decltype(types.connectionTimeout) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool discretionaryToJs(jsi::Runtime &rt, decltype(types.discretionary) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Object headersToJs(jsi::Runtime &rt, decltype(types.headers) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double progressDividerToJs(jsi::Runtime &rt, decltype(types.progressDivider) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double progressIntervalToJs(jsi::Runtime &rt, decltype(types.progressInterval) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double readTimeoutToJs(jsi::Runtime &rt, decltype(types.readTimeout) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasBeginCallbackToJs(jsi::Runtime &rt, decltype(types.hasBeginCallback) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasProgressCallbackToJs(jsi::Runtime &rt, decltype(types.hasProgressCallback) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasResumableCallbackToJs(jsi::Runtime &rt, decltype(types.hasResumableCallback) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "jobId", bridging::toJs(rt, value.jobId, jsInvoker));
+    result.setProperty(rt, "fromUrl", bridging::toJs(rt, value.fromUrl, jsInvoker));
+    result.setProperty(rt, "toFile", bridging::toJs(rt, value.toFile, jsInvoker));
+    result.setProperty(rt, "background", bridging::toJs(rt, value.background, jsInvoker));
+    result.setProperty(rt, "backgroundTimeout", bridging::toJs(rt, value.backgroundTimeout, jsInvoker));
+    result.setProperty(rt, "cacheable", bridging::toJs(rt, value.cacheable, jsInvoker));
+    result.setProperty(rt, "connectionTimeout", bridging::toJs(rt, value.connectionTimeout, jsInvoker));
+    result.setProperty(rt, "discretionary", bridging::toJs(rt, value.discretionary, jsInvoker));
+    result.setProperty(rt, "headers", bridging::toJs(rt, value.headers, jsInvoker));
+    result.setProperty(rt, "progressDivider", bridging::toJs(rt, value.progressDivider, jsInvoker));
+    result.setProperty(rt, "progressInterval", bridging::toJs(rt, value.progressInterval, jsInvoker));
+    result.setProperty(rt, "readTimeout", bridging::toJs(rt, value.readTimeout, jsInvoker));
+    result.setProperty(rt, "hasBeginCallback", bridging::toJs(rt, value.hasBeginCallback, jsInvoker));
+    result.setProperty(rt, "hasProgressCallback", bridging::toJs(rt, value.hasProgressCallback, jsInvoker));
+    result.setProperty(rt, "hasResumableCallback", bridging::toJs(rt, value.hasResumableCallback, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsDownloadResultT
+
+template <typename P0, typename P1, typename P2>
+struct ReactNativeFsDownloadResultT {
+  P0 jobId;
+  P1 statusCode;
+  P2 bytesWritten;
+  bool operator==(const ReactNativeFsDownloadResultT &other) const {
+    return jobId == other.jobId && statusCode == other.statusCode && bytesWritten == other.bytesWritten;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsDownloadResultTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.jobId)>(rt, value.getProperty(rt, "jobId"), jsInvoker),
+      bridging::fromJs<decltype(types.statusCode)>(rt, value.getProperty(rt, "statusCode"), jsInvoker),
+      bridging::fromJs<decltype(types.bytesWritten)>(rt, value.getProperty(rt, "bytesWritten"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double jobIdToJs(jsi::Runtime &rt, decltype(types.jobId) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double statusCodeToJs(jsi::Runtime &rt, decltype(types.statusCode) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double bytesWrittenToJs(jsi::Runtime &rt, decltype(types.bytesWritten) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "jobId", bridging::toJs(rt, value.jobId, jsInvoker));
+    result.setProperty(rt, "statusCode", bridging::toJs(rt, value.statusCode, jsInvoker));
+    result.setProperty(rt, "bytesWritten", bridging::toJs(rt, value.bytesWritten, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsFSInfoResultT
+
+template <typename P0, typename P1, typename P2, typename P3>
+struct ReactNativeFsFSInfoResultT {
+  P0 totalSpace;
+  P1 totalSpaceEx;
+  P2 freeSpace;
+  P3 freeSpaceEx;
+  bool operator==(const ReactNativeFsFSInfoResultT &other) const {
+    return totalSpace == other.totalSpace && totalSpaceEx == other.totalSpaceEx && freeSpace == other.freeSpace && freeSpaceEx == other.freeSpaceEx;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsFSInfoResultTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.totalSpace)>(rt, value.getProperty(rt, "totalSpace"), jsInvoker),
+      bridging::fromJs<decltype(types.totalSpaceEx)>(rt, value.getProperty(rt, "totalSpaceEx"), jsInvoker),
+      bridging::fromJs<decltype(types.freeSpace)>(rt, value.getProperty(rt, "freeSpace"), jsInvoker),
+      bridging::fromJs<decltype(types.freeSpaceEx)>(rt, value.getProperty(rt, "freeSpaceEx"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double totalSpaceToJs(jsi::Runtime &rt, decltype(types.totalSpace) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double totalSpaceExToJs(jsi::Runtime &rt, decltype(types.totalSpaceEx) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double freeSpaceToJs(jsi::Runtime &rt, decltype(types.freeSpace) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double freeSpaceExToJs(jsi::Runtime &rt, decltype(types.freeSpaceEx) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "totalSpace", bridging::toJs(rt, value.totalSpace, jsInvoker));
+    result.setProperty(rt, "totalSpaceEx", bridging::toJs(rt, value.totalSpaceEx, jsInvoker));
+    result.setProperty(rt, "freeSpace", bridging::toJs(rt, value.freeSpace, jsInvoker));
+    result.setProperty(rt, "freeSpaceEx", bridging::toJs(rt, value.freeSpaceEx, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsMkdirOptionsT
+
+template <typename P0, typename P1>
+struct ReactNativeFsMkdirOptionsT {
+  P0 NSURLIsExcludedFromBackupKey;
+  P1 NSFileProtectionKey;
+  bool operator==(const ReactNativeFsMkdirOptionsT &other) const {
+    return NSURLIsExcludedFromBackupKey == other.NSURLIsExcludedFromBackupKey && NSFileProtectionKey == other.NSFileProtectionKey;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsMkdirOptionsTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.NSURLIsExcludedFromBackupKey)>(rt, value.getProperty(rt, "NSURLIsExcludedFromBackupKey"), jsInvoker),
+      bridging::fromJs<decltype(types.NSFileProtectionKey)>(rt, value.getProperty(rt, "NSFileProtectionKey"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static bool NSURLIsExcludedFromBackupKeyToJs(jsi::Runtime &rt, decltype(types.NSURLIsExcludedFromBackupKey) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String NSFileProtectionKeyToJs(jsi::Runtime &rt, decltype(types.NSFileProtectionKey) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    if (value.NSURLIsExcludedFromBackupKey) {
+      result.setProperty(rt, "NSURLIsExcludedFromBackupKey", bridging::toJs(rt, value.NSURLIsExcludedFromBackupKey.value(), jsInvoker));
+    }
+    if (value.NSFileProtectionKey) {
+      result.setProperty(rt, "NSFileProtectionKey", bridging::toJs(rt, value.NSFileProtectionKey.value(), jsInvoker));
+    }
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsPickFileOptionsT
+
+template <typename P0, typename P1, typename P2>
+struct ReactNativeFsPickFileOptionsT {
+  P0 mimeTypes;
+  P1 pickerType;
+  P2 fileExtensions;
+  bool operator==(const ReactNativeFsPickFileOptionsT &other) const {
+    return mimeTypes == other.mimeTypes && pickerType == other.pickerType && fileExtensions == other.fileExtensions;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsPickFileOptionsTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.mimeTypes)>(rt, value.getProperty(rt, "mimeTypes"), jsInvoker),
+      bridging::fromJs<decltype(types.pickerType)>(rt, value.getProperty(rt, "pickerType"), jsInvoker),
+      bridging::fromJs<decltype(types.fileExtensions)>(rt, value.getProperty(rt, "fileExtensions"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static jsi::Array mimeTypesToJs(jsi::Runtime &rt, decltype(types.mimeTypes) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String pickerTypeToJs(jsi::Runtime &rt, decltype(types.pickerType) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Array fileExtensionsToJs(jsi::Runtime &rt, decltype(types.fileExtensions) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "mimeTypes", bridging::toJs(rt, value.mimeTypes, jsInvoker));
+    result.setProperty(rt, "pickerType", bridging::toJs(rt, value.pickerType, jsInvoker));
+    result.setProperty(rt, "fileExtensions", bridging::toJs(rt, value.fileExtensions, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsNativeReadDirResItemT
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
+struct ReactNativeFsNativeReadDirResItemT {
+  P0 ctime;
+  P1 mtime;
+  P2 name;
+  P3 path;
+  P4 size;
+  P5 type;
+  bool operator==(const ReactNativeFsNativeReadDirResItemT &other) const {
+    return ctime == other.ctime && mtime == other.mtime && name == other.name && path == other.path && size == other.size && type == other.type;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsNativeReadDirResItemTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.ctime)>(rt, value.getProperty(rt, "ctime"), jsInvoker),
+      bridging::fromJs<decltype(types.mtime)>(rt, value.getProperty(rt, "mtime"), jsInvoker),
+      bridging::fromJs<decltype(types.name)>(rt, value.getProperty(rt, "name"), jsInvoker),
+      bridging::fromJs<decltype(types.path)>(rt, value.getProperty(rt, "path"), jsInvoker),
+      bridging::fromJs<decltype(types.size)>(rt, value.getProperty(rt, "size"), jsInvoker),
+      bridging::fromJs<decltype(types.type)>(rt, value.getProperty(rt, "type"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double ctimeToJs(jsi::Runtime &rt, decltype(types.ctime) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double mtimeToJs(jsi::Runtime &rt, decltype(types.mtime) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String nameToJs(jsi::Runtime &rt, decltype(types.name) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String pathToJs(jsi::Runtime &rt, decltype(types.path) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double sizeToJs(jsi::Runtime &rt, decltype(types.size) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String typeToJs(jsi::Runtime &rt, decltype(types.type) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "ctime", bridging::toJs(rt, value.ctime, jsInvoker));
+    result.setProperty(rt, "mtime", bridging::toJs(rt, value.mtime, jsInvoker));
+    result.setProperty(rt, "name", bridging::toJs(rt, value.name, jsInvoker));
+    result.setProperty(rt, "path", bridging::toJs(rt, value.path, jsInvoker));
+    result.setProperty(rt, "size", bridging::toJs(rt, value.size, jsInvoker));
+    result.setProperty(rt, "type", bridging::toJs(rt, value.type, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsNativeStatResultT
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
+struct ReactNativeFsNativeStatResultT {
+  P0 ctime;
+  P1 mtime;
+  P2 size;
+  P3 type;
+  P4 mode;
+  P5 originalFilepath;
+  bool operator==(const ReactNativeFsNativeStatResultT &other) const {
+    return ctime == other.ctime && mtime == other.mtime && size == other.size && type == other.type && mode == other.mode && originalFilepath == other.originalFilepath;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsNativeStatResultTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.ctime)>(rt, value.getProperty(rt, "ctime"), jsInvoker),
+      bridging::fromJs<decltype(types.mtime)>(rt, value.getProperty(rt, "mtime"), jsInvoker),
+      bridging::fromJs<decltype(types.size)>(rt, value.getProperty(rt, "size"), jsInvoker),
+      bridging::fromJs<decltype(types.type)>(rt, value.getProperty(rt, "type"), jsInvoker),
+      bridging::fromJs<decltype(types.mode)>(rt, value.getProperty(rt, "mode"), jsInvoker),
+      bridging::fromJs<decltype(types.originalFilepath)>(rt, value.getProperty(rt, "originalFilepath"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double ctimeToJs(jsi::Runtime &rt, decltype(types.ctime) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double mtimeToJs(jsi::Runtime &rt, decltype(types.mtime) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double sizeToJs(jsi::Runtime &rt, decltype(types.size) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String typeToJs(jsi::Runtime &rt, decltype(types.type) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double modeToJs(jsi::Runtime &rt, decltype(types.mode) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String originalFilepathToJs(jsi::Runtime &rt, decltype(types.originalFilepath) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "ctime", bridging::toJs(rt, value.ctime, jsInvoker));
+    result.setProperty(rt, "mtime", bridging::toJs(rt, value.mtime, jsInvoker));
+    result.setProperty(rt, "size", bridging::toJs(rt, value.size, jsInvoker));
+    result.setProperty(rt, "type", bridging::toJs(rt, value.type, jsInvoker));
+    result.setProperty(rt, "mode", bridging::toJs(rt, value.mode, jsInvoker));
+    result.setProperty(rt, "originalFilepath", bridging::toJs(rt, value.originalFilepath, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsTouchOptions
+
+template <typename P0, typename P1>
+struct ReactNativeFsTouchOptions {
+  P0 ctime;
+  P1 mtime;
+  bool operator==(const ReactNativeFsTouchOptions &other) const {
+    return ctime == other.ctime && mtime == other.mtime;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsTouchOptionsBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.ctime)>(rt, value.getProperty(rt, "ctime"), jsInvoker),
+      bridging::fromJs<decltype(types.mtime)>(rt, value.getProperty(rt, "mtime"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double ctimeToJs(jsi::Runtime &rt, decltype(types.ctime) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double mtimeToJs(jsi::Runtime &rt, decltype(types.mtime) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    if (value.ctime) {
+      result.setProperty(rt, "ctime", bridging::toJs(rt, value.ctime.value(), jsInvoker));
+    }
+    if (value.mtime) {
+      result.setProperty(rt, "mtime", bridging::toJs(rt, value.mtime.value(), jsInvoker));
+    }
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsNativeUploadFileOptionsT
+
+template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8>
+struct ReactNativeFsNativeUploadFileOptionsT {
+  P0 jobId;
+  P1 toUrl;
+  P2 binaryStreamOnly;
+  P3 files;
+  P4 headers;
+  P5 fields;
+  P6 method;
+  P7 hasBeginCallback;
+  P8 hasProgressCallback;
+  bool operator==(const ReactNativeFsNativeUploadFileOptionsT &other) const {
+    return jobId == other.jobId && toUrl == other.toUrl && binaryStreamOnly == other.binaryStreamOnly && files == other.files && headers == other.headers && fields == other.fields && method == other.method && hasBeginCallback == other.hasBeginCallback && hasProgressCallback == other.hasProgressCallback;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsNativeUploadFileOptionsTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.jobId)>(rt, value.getProperty(rt, "jobId"), jsInvoker),
+      bridging::fromJs<decltype(types.toUrl)>(rt, value.getProperty(rt, "toUrl"), jsInvoker),
+      bridging::fromJs<decltype(types.binaryStreamOnly)>(rt, value.getProperty(rt, "binaryStreamOnly"), jsInvoker),
+      bridging::fromJs<decltype(types.files)>(rt, value.getProperty(rt, "files"), jsInvoker),
+      bridging::fromJs<decltype(types.headers)>(rt, value.getProperty(rt, "headers"), jsInvoker),
+      bridging::fromJs<decltype(types.fields)>(rt, value.getProperty(rt, "fields"), jsInvoker),
+      bridging::fromJs<decltype(types.method)>(rt, value.getProperty(rt, "method"), jsInvoker),
+      bridging::fromJs<decltype(types.hasBeginCallback)>(rt, value.getProperty(rt, "hasBeginCallback"), jsInvoker),
+      bridging::fromJs<decltype(types.hasProgressCallback)>(rt, value.getProperty(rt, "hasProgressCallback"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double jobIdToJs(jsi::Runtime &rt, decltype(types.jobId) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String toUrlToJs(jsi::Runtime &rt, decltype(types.toUrl) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool binaryStreamOnlyToJs(jsi::Runtime &rt, decltype(types.binaryStreamOnly) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Array filesToJs(jsi::Runtime &rt, decltype(types.files) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Object headersToJs(jsi::Runtime &rt, decltype(types.headers) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Object fieldsToJs(jsi::Runtime &rt, decltype(types.fields) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String methodToJs(jsi::Runtime &rt, decltype(types.method) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasBeginCallbackToJs(jsi::Runtime &rt, decltype(types.hasBeginCallback) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static bool hasProgressCallbackToJs(jsi::Runtime &rt, decltype(types.hasProgressCallback) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "jobId", bridging::toJs(rt, value.jobId, jsInvoker));
+    result.setProperty(rt, "toUrl", bridging::toJs(rt, value.toUrl, jsInvoker));
+    if (value.binaryStreamOnly) {
+      result.setProperty(rt, "binaryStreamOnly", bridging::toJs(rt, value.binaryStreamOnly.value(), jsInvoker));
+    }
+    result.setProperty(rt, "files", bridging::toJs(rt, value.files, jsInvoker));
+    if (value.headers) {
+      result.setProperty(rt, "headers", bridging::toJs(rt, value.headers.value(), jsInvoker));
+    }
+    if (value.fields) {
+      result.setProperty(rt, "fields", bridging::toJs(rt, value.fields.value(), jsInvoker));
+    }
+    if (value.method) {
+      result.setProperty(rt, "method", bridging::toJs(rt, value.method.value(), jsInvoker));
+    }
+    result.setProperty(rt, "hasBeginCallback", bridging::toJs(rt, value.hasBeginCallback, jsInvoker));
+    result.setProperty(rt, "hasProgressCallback", bridging::toJs(rt, value.hasProgressCallback, jsInvoker));
+    return result;
+  }
+};
+
+
+
+#pragma mark - ReactNativeFsUploadResultT
+
+template <typename P0, typename P1, typename P2, typename P3>
+struct ReactNativeFsUploadResultT {
+  P0 jobId;
+  P1 statusCode;
+  P2 headers;
+  P3 body;
+  bool operator==(const ReactNativeFsUploadResultT &other) const {
+    return jobId == other.jobId && statusCode == other.statusCode && headers == other.headers && body == other.body;
+  }
+};
+
+template <typename T>
+struct ReactNativeFsUploadResultTBridging {
+  static T types;
+
+  static T fromJs(
+      jsi::Runtime &rt,
+      const jsi::Object &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    T result{
+      bridging::fromJs<decltype(types.jobId)>(rt, value.getProperty(rt, "jobId"), jsInvoker),
+      bridging::fromJs<decltype(types.statusCode)>(rt, value.getProperty(rt, "statusCode"), jsInvoker),
+      bridging::fromJs<decltype(types.headers)>(rt, value.getProperty(rt, "headers"), jsInvoker),
+      bridging::fromJs<decltype(types.body)>(rt, value.getProperty(rt, "body"), jsInvoker)};
+    return result;
+  }
+
+#ifdef DEBUG
+  static double jobIdToJs(jsi::Runtime &rt, decltype(types.jobId) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static double statusCodeToJs(jsi::Runtime &rt, decltype(types.statusCode) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::Object headersToJs(jsi::Runtime &rt, decltype(types.headers) value) {
+    return bridging::toJs(rt, value);
+  }
+
+  static jsi::String bodyToJs(jsi::Runtime &rt, decltype(types.body) value) {
+    return bridging::toJs(rt, value);
+  }
+#endif
+
+  static jsi::Object toJs(
+      jsi::Runtime &rt,
+      const T &value,
+      const std::shared_ptr<CallInvoker> &jsInvoker) {
+    auto result = facebook::jsi::Object(rt);
+    result.setProperty(rt, "jobId", bridging::toJs(rt, value.jobId, jsInvoker));
+    result.setProperty(rt, "statusCode", bridging::toJs(rt, value.statusCode, jsInvoker));
+    result.setProperty(rt, "headers", bridging::toJs(rt, value.headers, jsInvoker));
+    result.setProperty(rt, "body", bridging::toJs(rt, value.body, jsInvoker));
+    return result;
+  }
+};
+
+class JSI_EXPORT NativeReactNativeFsCxxSpecJSI : public TurboModule {
+protected:
+  NativeReactNativeFsCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);
+
+public:
+  virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
+  virtual void addListener(jsi::Runtime &rt, jsi::String event) = 0;
+  virtual void removeListeners(jsi::Runtime &rt, double count) = 0;
+  virtual jsi::Value appendFile(jsi::Runtime &rt, jsi::String path, jsi::String b64) = 0;
+  virtual jsi::Value copyFile(jsi::Runtime &rt, jsi::String from, jsi::String into, jsi::Object options) = 0;
+  virtual jsi::Value downloadFile(jsi::Runtime &rt, jsi::Object options) = 0;
+  virtual jsi::Value exists(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value getFSInfo(jsi::Runtime &rt) = 0;
+  virtual jsi::Value hash(jsi::Runtime &rt, jsi::String path, jsi::String algorithm) = 0;
+  virtual jsi::Value mkdir(jsi::Runtime &rt, jsi::String path, jsi::Object options) = 0;
+  virtual jsi::Value moveFile(jsi::Runtime &rt, jsi::String from, jsi::String into, jsi::Object options) = 0;
+  virtual jsi::Value pickFile(jsi::Runtime &rt, jsi::Object options) = 0;
+  virtual jsi::Value read(jsi::Runtime &rt, jsi::String path, double length, double position) = 0;
+  virtual jsi::Value readFile(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value readDir(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value stat(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual void stopDownload(jsi::Runtime &rt, double jobId) = 0;
+  virtual void stopUpload(jsi::Runtime &rt, double jobId) = 0;
+  virtual jsi::Value touch(jsi::Runtime &rt, jsi::String path, jsi::Object options) = 0;
+  virtual jsi::Value unlink(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value uploadFiles(jsi::Runtime &rt, jsi::Object options) = 0;
+  virtual jsi::Value write(jsi::Runtime &rt, jsi::String path, jsi::String b64, double position) = 0;
+  virtual jsi::Value writeFile(jsi::Runtime &rt, jsi::String path, jsi::String b64, jsi::Object options) = 0;
+  virtual jsi::Value copyFileAssets(jsi::Runtime &rt, jsi::String from, jsi::String into) = 0;
+  virtual jsi::Value copyFileRes(jsi::Runtime &rt, jsi::String from, jsi::String into) = 0;
+  virtual jsi::Value existsAssets(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value existsRes(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value getAllExternalFilesDirs(jsi::Runtime &rt) = 0;
+  virtual jsi::Value readFileAssets(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value readFileRes(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value readDirAssets(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value scanFile(jsi::Runtime &rt, jsi::String path) = 0;
+  virtual jsi::Value setReadable(jsi::Runtime &rt, jsi::String filepath, bool readable, bool ownerOnly) = 0;
+  virtual jsi::Value copyAssetsFileIOS(jsi::Runtime &rt, jsi::String imageUri, jsi::String destPath, double width, double height, double scale, double compression, jsi::String resizeMode) = 0;
+  virtual jsi::Value copyAssetsVideoIOS(jsi::Runtime &rt, jsi::String imageUri, jsi::String destPath) = 0;
+  virtual void completeHandlerIOS(jsi::Runtime &rt, double jobId) = 0;
+  virtual jsi::Value isResumable(jsi::Runtime &rt, double jobId) = 0;
+  virtual jsi::Value pathForBundle(jsi::Runtime &rt, jsi::String bundle) = 0;
+  virtual jsi::Value pathForGroup(jsi::Runtime &rt, jsi::String group) = 0;
+  virtual void resumeDownload(jsi::Runtime &rt, double jobId) = 0;
+  virtual jsi::Value copyFolder(jsi::Runtime &rt, jsi::String from, jsi::String into) = 0;
+
+};
+
+template <typename T>
+class JSI_EXPORT NativeReactNativeFsCxxSpec : public TurboModule {
+public:
+  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
+    return delegate_.get(rt, propName);
+  }
+
+  static constexpr std::string_view kModuleName = "ReactNativeFs";
+
+protected:
+  NativeReactNativeFsCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
+    : TurboModule(std::string{NativeReactNativeFsCxxSpec::kModuleName}, jsInvoker),
+      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}
+
+private:
+  class Delegate : public NativeReactNativeFsCxxSpecJSI {
+  public:
+    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
+      NativeReactNativeFsCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}
+
+    jsi::Object getConstants(jsi::Runtime &rt) override {
+      static_assert(
+          bridging::getParameterCount(&T::getConstants) == 1,
+          "Expected getConstants(...) to have 1 parameters");
+
+      return bridging::callFromJs<jsi::Object>(
+          rt, &T::getConstants, jsInvoker_, instance_);
+    }
+    void addListener(jsi::Runtime &rt, jsi::String event) override {
+      static_assert(
+          bridging::getParameterCount(&T::addListener) == 2,
+          "Expected addListener(...) to have 2 parameters");
+
+      return bridging::callFromJs<void>(
+          rt, &T::addListener, jsInvoker_, instance_, std::move(event));
+    }
+    void removeListeners(jsi::Runtime &rt, double count) override {
+      static_assert(
+          bridging::getParameterCount(&T::removeListeners) == 2,
+          "Expected removeListeners(...) to have 2 parameters");
+
+      return bridging::callFromJs<void>(
+          rt, &T::removeListeners, jsInvoker_, instance_, std::move(count));
+    }
+    jsi::Value appendFile(jsi::Runtime &rt, jsi::String path, jsi::String b64) override {
+      static_assert(
+          bridging::getParameterCount(&T::appendFile) == 3,
+          "Expected appendFile(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::appendFile, jsInvoker_, instance_, std::move(path), std::move(b64));
+    }
+    jsi::Value copyFile(jsi::Runtime &rt, jsi::String from, jsi::String into, jsi::Object options) override {
+      static_assert(
+          bridging::getParameterCount(&T::copyFile) == 4,
+          "Expected copyFile(...) to have 4 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::copyFile, jsInvoker_, instance_, std::move(from), std::move(into), std::move(options));
+    }
+    jsi::Value downloadFile(jsi::Runtime &rt, jsi::Object options) override {
+      static_assert(
+          bridging::getParameterCount(&T::downloadFile) == 2,
+          "Expected downloadFile(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::downloadFile, jsInvoker_, instance_, std::move(options));
+    }
+    jsi::Value exists(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::exists) == 2,
+          "Expected exists(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::exists, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value getFSInfo(jsi::Runtime &rt) override {
+      static_assert(
+          bridging::getParameterCount(&T::getFSInfo) == 1,
+          "Expected getFSInfo(...) to have 1 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::getFSInfo, jsInvoker_, instance_);
+    }
+    jsi::Value hash(jsi::Runtime &rt, jsi::String path, jsi::String algorithm) override {
+      static_assert(
+          bridging::getParameterCount(&T::hash) == 3,
+          "Expected hash(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::hash, jsInvoker_, instance_, std::move(path), std::move(algorithm));
+    }
+    jsi::Value mkdir(jsi::Runtime &rt, jsi::String path, jsi::Object options) override {
+      static_assert(
+          bridging::getParameterCount(&T::mkdir) == 3,
+          "Expected mkdir(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::mkdir, jsInvoker_, instance_, std::move(path), std::move(options));
+    }
+    jsi::Value moveFile(jsi::Runtime &rt, jsi::String from, jsi::String into, jsi::Object options) override {
+      static_assert(
+          bridging::getParameterCount(&T::moveFile) == 4,
+          "Expected moveFile(...) to have 4 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::moveFile, jsInvoker_, instance_, std::move(from), std::move(into), std::move(options));
+    }
+    jsi::Value pickFile(jsi::Runtime &rt, jsi::Object options) override {
+      static_assert(
+          bridging::getParameterCount(&T::pickFile) == 2,
+          "Expected pickFile(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::pickFile, jsInvoker_, instance_, std::move(options));
+    }
+    jsi::Value read(jsi::Runtime &rt, jsi::String path, double length, double position) override {
+      static_assert(
+          bridging::getParameterCount(&T::read) == 4,
+          "Expected read(...) to have 4 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::read, jsInvoker_, instance_, std::move(path), std::move(length), std::move(position));
+    }
+    jsi::Value readFile(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::readFile) == 2,
+          "Expected readFile(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::readFile, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value readDir(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::readDir) == 2,
+          "Expected readDir(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::readDir, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value stat(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::stat) == 2,
+          "Expected stat(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::stat, jsInvoker_, instance_, std::move(path));
+    }
+    void stopDownload(jsi::Runtime &rt, double jobId) override {
+      static_assert(
+          bridging::getParameterCount(&T::stopDownload) == 2,
+          "Expected stopDownload(...) to have 2 parameters");
+
+      return bridging::callFromJs<void>(
+          rt, &T::stopDownload, jsInvoker_, instance_, std::move(jobId));
+    }
+    void stopUpload(jsi::Runtime &rt, double jobId) override {
+      static_assert(
+          bridging::getParameterCount(&T::stopUpload) == 2,
+          "Expected stopUpload(...) to have 2 parameters");
+
+      return bridging::callFromJs<void>(
+          rt, &T::stopUpload, jsInvoker_, instance_, std::move(jobId));
+    }
+    jsi::Value touch(jsi::Runtime &rt, jsi::String path, jsi::Object options) override {
+      static_assert(
+          bridging::getParameterCount(&T::touch) == 3,
+          "Expected touch(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::touch, jsInvoker_, instance_, std::move(path), std::move(options));
+    }
+    jsi::Value unlink(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::unlink) == 2,
+          "Expected unlink(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::unlink, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value uploadFiles(jsi::Runtime &rt, jsi::Object options) override {
+      static_assert(
+          bridging::getParameterCount(&T::uploadFiles) == 2,
+          "Expected uploadFiles(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::uploadFiles, jsInvoker_, instance_, std::move(options));
+    }
+    jsi::Value write(jsi::Runtime &rt, jsi::String path, jsi::String b64, double position) override {
+      static_assert(
+          bridging::getParameterCount(&T::write) == 4,
+          "Expected write(...) to have 4 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::write, jsInvoker_, instance_, std::move(path), std::move(b64), std::move(position));
+    }
+    jsi::Value writeFile(jsi::Runtime &rt, jsi::String path, jsi::String b64, jsi::Object options) override {
+      static_assert(
+          bridging::getParameterCount(&T::writeFile) == 4,
+          "Expected writeFile(...) to have 4 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::writeFile, jsInvoker_, instance_, std::move(path), std::move(b64), std::move(options));
+    }
+    jsi::Value copyFileAssets(jsi::Runtime &rt, jsi::String from, jsi::String into) override {
+      static_assert(
+          bridging::getParameterCount(&T::copyFileAssets) == 3,
+          "Expected copyFileAssets(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::copyFileAssets, jsInvoker_, instance_, std::move(from), std::move(into));
+    }
+    jsi::Value copyFileRes(jsi::Runtime &rt, jsi::String from, jsi::String into) override {
+      static_assert(
+          bridging::getParameterCount(&T::copyFileRes) == 3,
+          "Expected copyFileRes(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::copyFileRes, jsInvoker_, instance_, std::move(from), std::move(into));
+    }
+    jsi::Value existsAssets(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::existsAssets) == 2,
+          "Expected existsAssets(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::existsAssets, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value existsRes(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::existsRes) == 2,
+          "Expected existsRes(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::existsRes, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value getAllExternalFilesDirs(jsi::Runtime &rt) override {
+      static_assert(
+          bridging::getParameterCount(&T::getAllExternalFilesDirs) == 1,
+          "Expected getAllExternalFilesDirs(...) to have 1 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::getAllExternalFilesDirs, jsInvoker_, instance_);
+    }
+    jsi::Value readFileAssets(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::readFileAssets) == 2,
+          "Expected readFileAssets(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::readFileAssets, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value readFileRes(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::readFileRes) == 2,
+          "Expected readFileRes(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::readFileRes, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value readDirAssets(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::readDirAssets) == 2,
+          "Expected readDirAssets(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::readDirAssets, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value scanFile(jsi::Runtime &rt, jsi::String path) override {
+      static_assert(
+          bridging::getParameterCount(&T::scanFile) == 2,
+          "Expected scanFile(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::scanFile, jsInvoker_, instance_, std::move(path));
+    }
+    jsi::Value setReadable(jsi::Runtime &rt, jsi::String filepath, bool readable, bool ownerOnly) override {
+      static_assert(
+          bridging::getParameterCount(&T::setReadable) == 4,
+          "Expected setReadable(...) to have 4 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::setReadable, jsInvoker_, instance_, std::move(filepath), std::move(readable), std::move(ownerOnly));
+    }
+    jsi::Value copyAssetsFileIOS(jsi::Runtime &rt, jsi::String imageUri, jsi::String destPath, double width, double height, double scale, double compression, jsi::String resizeMode) override {
+      static_assert(
+          bridging::getParameterCount(&T::copyAssetsFileIOS) == 8,
+          "Expected copyAssetsFileIOS(...) to have 8 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::copyAssetsFileIOS, jsInvoker_, instance_, std::move(imageUri), std::move(destPath), std::move(width), std::move(height), std::move(scale), std::move(compression), std::move(resizeMode));
+    }
+    jsi::Value copyAssetsVideoIOS(jsi::Runtime &rt, jsi::String imageUri, jsi::String destPath) override {
+      static_assert(
+          bridging::getParameterCount(&T::copyAssetsVideoIOS) == 3,
+          "Expected copyAssetsVideoIOS(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::copyAssetsVideoIOS, jsInvoker_, instance_, std::move(imageUri), std::move(destPath));
+    }
+    void completeHandlerIOS(jsi::Runtime &rt, double jobId) override {
+      static_assert(
+          bridging::getParameterCount(&T::completeHandlerIOS) == 2,
+          "Expected completeHandlerIOS(...) to have 2 parameters");
+
+      return bridging::callFromJs<void>(
+          rt, &T::completeHandlerIOS, jsInvoker_, instance_, std::move(jobId));
+    }
+    jsi::Value isResumable(jsi::Runtime &rt, double jobId) override {
+      static_assert(
+          bridging::getParameterCount(&T::isResumable) == 2,
+          "Expected isResumable(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::isResumable, jsInvoker_, instance_, std::move(jobId));
+    }
+    jsi::Value pathForBundle(jsi::Runtime &rt, jsi::String bundle) override {
+      static_assert(
+          bridging::getParameterCount(&T::pathForBundle) == 2,
+          "Expected pathForBundle(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::pathForBundle, jsInvoker_, instance_, std::move(bundle));
+    }
+    jsi::Value pathForGroup(jsi::Runtime &rt, jsi::String group) override {
+      static_assert(
+          bridging::getParameterCount(&T::pathForGroup) == 2,
+          "Expected pathForGroup(...) to have 2 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::pathForGroup, jsInvoker_, instance_, std::move(group));
+    }
+    void resumeDownload(jsi::Runtime &rt, double jobId) override {
+      static_assert(
+          bridging::getParameterCount(&T::resumeDownload) == 2,
+          "Expected resumeDownload(...) to have 2 parameters");
+
+      return bridging::callFromJs<void>(
+          rt, &T::resumeDownload, jsInvoker_, instance_, std::move(jobId));
+    }
+    jsi::Value copyFolder(jsi::Runtime &rt, jsi::String from, jsi::String into) override {
+      static_assert(
+          bridging::getParameterCount(&T::copyFolder) == 3,
+          "Expected copyFolder(...) to have 3 parameters");
+
+      return bridging::callFromJs<jsi::Value>(
+          rt, &T::copyFolder, jsInvoker_, instance_, std::move(from), std::move(into));
+    }
+
+  private:
+    T *instance_;
+  };
+
+  Delegate delegate_;
+};
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ShadowNodes.cpp b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ShadowNodes.cpp
new file mode 100644
index 0000000..375b3af
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ShadowNodes.cpp
@@ -0,0 +1,17 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateShadowNodeCpp.js
+ */
+
+#include <react/renderer/components/ReactNativeFsSpec/ShadowNodes.h>
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ShadowNodes.h b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ShadowNodes.h
new file mode 100644
index 0000000..67d5e7a
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/ShadowNodes.h
@@ -0,0 +1,23 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateShadowNodeH.js
+ */
+
+#pragma once
+
+#include <react/renderer/components/ReactNativeFsSpec/EventEmitters.h>
+#include <react/renderer/components/ReactNativeFsSpec/Props.h>
+#include <react/renderer/components/ReactNativeFsSpec/States.h>
+#include <react/renderer/components/view/ConcreteViewShadowNode.h>
+#include <jsi/jsi.h>
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/States.cpp b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/States.cpp
new file mode 100644
index 0000000..b494eb1
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/States.cpp
@@ -0,0 +1,16 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateStateCpp.js
+ */
+#include <react/renderer/components/ReactNativeFsSpec/States.h>
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/States.h b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/States.h
new file mode 100644
index 0000000..aeb63ea
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/jni/react/renderer/components/ReactNativeFsSpec/States.h
@@ -0,0 +1,21 @@
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by codegen project: GenerateStateH.js
+ */
+#pragma once
+
+#ifdef ANDROID
+#include <folly/dynamic.h>
+#include <react/renderer/mapbuffer/MapBuffer.h>
+#include <react/renderer/mapbuffer/MapBufferBuilder.h>
+#endif
+
+namespace facebook::react {
+
+
+
+} // namespace facebook::react
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/schema.json b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/schema.json
new file mode 100644
index 0000000..447d4f7
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/generated/source/codegen/schema.json
@@ -0,0 +1,1645 @@
+{
+  "modules": {
+    "NativeReactNativeFs": {
+      "type": "NativeModule",
+      "aliasMap": {
+        "FileOptionsT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "NSFileProtectionKey",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "NativeDownloadFileOptionsT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "jobId",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "fromUrl",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            },
+            {
+              "name": "toFile",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            },
+            {
+              "name": "background",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            },
+            {
+              "name": "backgroundTimeout",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "cacheable",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            },
+            {
+              "name": "connectionTimeout",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "discretionary",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            },
+            {
+              "name": "headers",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "GenericObjectTypeAnnotation",
+                "dictionaryValueType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "progressDivider",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "progressInterval",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "readTimeout",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "hasBeginCallback",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            },
+            {
+              "name": "hasProgressCallback",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            },
+            {
+              "name": "hasResumableCallback",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "DownloadResultT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "jobId",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "statusCode",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "bytesWritten",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "FSInfoResultT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "totalSpace",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "totalSpaceEx",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "freeSpace",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "freeSpaceEx",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "MkdirOptionsT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "NSURLIsExcludedFromBackupKey",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            },
+            {
+              "name": "NSFileProtectionKey",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "PickFileOptionsT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "mimeTypes",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "pickerType",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            },
+            {
+              "name": "fileExtensions",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "NativeReadDirResItemT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "ctime",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "mtime",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "name",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            },
+            {
+              "name": "path",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            },
+            {
+              "name": "size",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "type",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "NativeStatResultT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "ctime",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "mtime",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "size",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "type",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            },
+            {
+              "name": "mode",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "originalFilepath",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "TouchOptions": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "ctime",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "mtime",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "NativeUploadFileOptionsT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "jobId",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "toUrl",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            },
+            {
+              "name": "binaryStreamOnly",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            },
+            {
+              "name": "files",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "ArrayTypeAnnotation"
+              }
+            },
+            {
+              "name": "headers",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "GenericObjectTypeAnnotation",
+                "dictionaryValueType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "fields",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "GenericObjectTypeAnnotation",
+                "dictionaryValueType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "method",
+              "optional": true,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            },
+            {
+              "name": "hasBeginCallback",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            },
+            {
+              "name": "hasProgressCallback",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "BooleanTypeAnnotation"
+              }
+            }
+          ]
+        },
+        "UploadResultT": {
+          "type": "ObjectTypeAnnotation",
+          "properties": [
+            {
+              "name": "jobId",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "statusCode",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "NumberTypeAnnotation"
+              }
+            },
+            {
+              "name": "headers",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "GenericObjectTypeAnnotation",
+                "dictionaryValueType": {
+                  "type": "StringTypeAnnotation"
+                }
+              }
+            },
+            {
+              "name": "body",
+              "optional": false,
+              "typeAnnotation": {
+                "type": "StringTypeAnnotation"
+              }
+            }
+          ]
+        }
+      },
+      "enumMap": {},
+      "spec": {
+        "properties": [
+          {
+            "name": "getConstants",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "ObjectTypeAnnotation",
+                "properties": [
+                  {
+                    "name": "CachesDirectoryPath",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "DocumentDirectoryPath",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "DownloadDirectoryPath",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "ExternalCachesDirectoryPath",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "ExternalDirectoryPath",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "ExternalStorageDirectoryPath",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "MainBundlePath",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "TemporaryDirectoryPath",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "FileTypeRegular",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "FileTypeDirectory",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "DocumentDirectory",
+                    "optional": false,
+                    "typeAnnotation": {
+                      "type": "NumberTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "LibraryDirectoryPath",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "PicturesDirectoryPath",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "RoamingDirectoryPath",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  },
+                  {
+                    "name": "FileProtectionKeys",
+                    "optional": true,
+                    "typeAnnotation": {
+                      "type": "StringTypeAnnotation"
+                    }
+                  }
+                ]
+              },
+              "params": []
+            }
+          },
+          {
+            "name": "addListener",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "VoidTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "event",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "removeListeners",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "VoidTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "count",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "appendFile",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "b64",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "copyFile",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "from",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "into",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "FileOptionsT"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "downloadFile",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "TypeAliasTypeAnnotation",
+                  "name": "DownloadResultT"
+                }
+              },
+              "params": [
+                {
+                  "name": "options",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "NativeDownloadFileOptionsT"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "exists",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "BooleanTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "getFSInfo",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "TypeAliasTypeAnnotation",
+                  "name": "FSInfoResultT"
+                }
+              },
+              "params": []
+            }
+          },
+          {
+            "name": "hash",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "algorithm",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "mkdir",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "MkdirOptionsT"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "moveFile",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "from",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "into",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "FileOptionsT"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "pickFile",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "ArrayTypeAnnotation",
+                  "elementType": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              },
+              "params": [
+                {
+                  "name": "options",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "PickFileOptionsT"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "read",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "length",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "position",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "readFile",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "readDir",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "ArrayTypeAnnotation",
+                  "elementType": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "NativeReadDirResItemT"
+                  }
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "stat",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "TypeAliasTypeAnnotation",
+                  "name": "NativeStatResultT"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "stopDownload",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "VoidTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "jobId",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "stopUpload",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "VoidTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "jobId",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "touch",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "TouchOptions"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "unlink",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "uploadFiles",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "TypeAliasTypeAnnotation",
+                  "name": "UploadResultT"
+                }
+              },
+              "params": [
+                {
+                  "name": "options",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "NativeUploadFileOptionsT"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "write",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "b64",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "position",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "writeFile",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "b64",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "FileOptionsT"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "copyFileAssets",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "from",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "into",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "copyFileRes",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "from",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "into",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "existsAssets",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "BooleanTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "existsRes",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "BooleanTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "getAllExternalFilesDirs",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "ArrayTypeAnnotation",
+                  "elementType": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              },
+              "params": []
+            }
+          },
+          {
+            "name": "readFileAssets",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "readFileRes",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "readDirAssets",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "ArrayTypeAnnotation",
+                  "elementType": {
+                    "type": "TypeAliasTypeAnnotation",
+                    "name": "NativeReadDirResItemT"
+                  }
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "scanFile",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "NullableTypeAnnotation",
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              },
+              "params": [
+                {
+                  "name": "path",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "setReadable",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "BooleanTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "filepath",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "readable",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "BooleanTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "ownerOnly",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "BooleanTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "copyAssetsFileIOS",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "imageUri",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "destPath",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "width",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "height",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "scale",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "compression",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "resizeMode",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "copyAssetsVideoIOS",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "imageUri",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "destPath",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "completeHandlerIOS",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "VoidTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "jobId",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "isResumable",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "BooleanTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "jobId",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "pathForBundle",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "bundle",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "pathForGroup",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "StringTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "group",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "resumeDownload",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "VoidTypeAnnotation"
+              },
+              "params": [
+                {
+                  "name": "jobId",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "NumberTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          },
+          {
+            "name": "copyFolder",
+            "optional": false,
+            "typeAnnotation": {
+              "type": "FunctionTypeAnnotation",
+              "returnTypeAnnotation": {
+                "type": "PromiseTypeAnnotation",
+                "elementType": {
+                  "type": "VoidTypeAnnotation"
+                }
+              },
+              "params": [
+                {
+                  "name": "from",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                },
+                {
+                  "name": "into",
+                  "optional": false,
+                  "typeAnnotation": {
+                    "type": "StringTypeAnnotation"
+                  }
+                }
+              ]
+            }
+          }
+        ]
+      },
+      "moduleName": "ReactNativeFs"
+    }
+  }
+}
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/AndroidManifest.xml b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/AndroidManifest.xml
new file mode 100644
index 0000000..c5bf69e
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/AndroidManifest.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.drpogodin.reactnativefs" >
+
+    <uses-sdk android:minSdkVersion="24" />
+
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/output-metadata.json b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/output-metadata.json
new file mode 100644
index 0000000..ec663b3
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aapt_friendly_merged_manifests/debug/aapt/output-metadata.json
@@ -0,0 +1,18 @@
+{
+  "version": 3,
+  "artifactType": {
+    "type": "AAPT_FRIENDLY_MERGED_MANIFESTS",
+    "kind": "Directory"
+  },
+  "applicationId": "com.drpogodin.reactnativefs",
+  "variantName": "debug",
+  "elements": [
+    {
+      "type": "SINGLE",
+      "filters": [],
+      "attributes": [],
+      "outputFile": "AndroidManifest.xml"
+    }
+  ],
+  "elementType": "File"
+}
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aar_metadata/debug/aar-metadata.properties b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aar_metadata/debug/aar-metadata.properties
new file mode 100644
index 0000000..1211b1e
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/aar_metadata/debug/aar-metadata.properties
@@ -0,0 +1,6 @@
+aarFormatVersion=1.0
+aarMetadataVersion=1.0
+minCompileSdk=1
+minCompileSdkExtension=0
+minAndroidGradlePluginVersion=1.0.0
+coreLibraryDesugaringEnabled=false
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json
new file mode 100644
index 0000000..9e26dfe
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/annotation_processor_list/debug/annotationProcessors.json
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/compile_r_class_jar/debug/R.jar b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/compile_r_class_jar/debug/R.jar
new file mode 100644
index 0000000..2cb0f52
Binary files /dev/null and b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/compile_r_class_jar/debug/R.jar differ
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/compile_symbol_list/debug/R.txt b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/compile_symbol_list/debug/R.txt
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
new file mode 100644
index 0000000..67ee34a
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/incremental/debug/packageDebugResources/compile-file-map.properties
@@ -0,0 +1 @@
+#Sun Jul 06 18:54:12 IST 2025
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
new file mode 100644
index 0000000..c06daf6
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/incremental/debug/packageDebugResources/merger.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merger version="3"><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="main" generated-set="main$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="debug" generated-set="debug$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\debug\res"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated$Generated" generated="true" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\build\generated\res\resValues\debug"/></dataSet><dataSet aapt-namespace="http://schemas.android.com/apk/res-auto" config="generated" generated-set="generated$Generated" ignore_pattern="!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"><source path="C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\build\generated\res\resValues\debug"/></dataSet><mergedItems/></merger>
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/local_only_symbol_list/debug/R-def.txt b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/local_only_symbol_list/debug/R-def.txt
new file mode 100644
index 0000000..78ac5b8
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/local_only_symbol_list/debug/R-def.txt
@@ -0,0 +1,2 @@
+R_DEF: Internal format may change without notice
+local
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/manifest_merge_blame_file/debug/manifest-merger-blame-debug-report.txt b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/manifest_merge_blame_file/debug/manifest-merger-blame-debug-report.txt
new file mode 100644
index 0000000..c33300a
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/manifest_merge_blame_file/debug/manifest-merger-blame-debug-report.txt
@@ -0,0 +1,11 @@
+1<?xml version="1.0" encoding="utf-8"?>
+2<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+3    package="com.drpogodin.reactnativefs" >
+4
+5    <uses-sdk android:minSdkVersion="24" />
+6
+7    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+7-->C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml:2:1-77
+7-->C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml:2:18-74
+8
+9</manifest>
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/merged_manifest/debug/AndroidManifest.xml b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/merged_manifest/debug/AndroidManifest.xml
new file mode 100644
index 0000000..c5bf69e
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/merged_manifest/debug/AndroidManifest.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.drpogodin.reactnativefs" >
+
+    <uses-sdk android:minSdkVersion="24" />
+
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+</manifest>
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/navigation_json/debug/navigation.json b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/navigation_json/debug/navigation.json
new file mode 100644
index 0000000..0637a08
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/navigation_json/debug/navigation.json
@@ -0,0 +1 @@
+[]
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/symbol_list_with_package_name/debug/package-aware-r.txt b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/symbol_list_with_package_name/debug/package-aware-r.txt
new file mode 100644
index 0000000..fab14fd
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/intermediates/symbol_list_with_package_name/debug/package-aware-r.txt
@@ -0,0 +1 @@
+com.drpogodin.reactnativefs
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/kotlin/compileDebugKotlin/cacheable/dirty-sources.txt b/node_modules/@dr.pogodin/react-native-fs/android/build/kotlin/compileDebugKotlin/cacheable/dirty-sources.txt
new file mode 100644
index 0000000..d65e660
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/kotlin/compileDebugKotlin/cacheable/dirty-sources.txt
@@ -0,0 +1,10 @@
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\Uploader.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\UploadParams.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\IORejectionException.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\ReactNativeFsModule.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\ReactNativeFsPackage.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\Downloader.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\DownloadParams.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\DownloadResult.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\UploadResult.kt
+C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\java\com\drpogodin\reactnativefs\Errors.kt
\ No newline at end of file
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/kotlin/compileDebugKotlin/local-state/build-history.bin b/node_modules/@dr.pogodin/react-native-fs/android/build/kotlin/compileDebugKotlin/local-state/build-history.bin
new file mode 100644
index 0000000..9a6b278
Binary files /dev/null and b/node_modules/@dr.pogodin/react-native-fs/android/build/kotlin/compileDebugKotlin/local-state/build-history.bin differ
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/build/outputs/logs/manifest-merger-debug-report.txt b/node_modules/@dr.pogodin/react-native-fs/android/build/outputs/logs/manifest-merger-debug-report.txt
new file mode 100644
index 0000000..1d8caaa
--- /dev/null
+++ b/node_modules/@dr.pogodin/react-native-fs/android/build/outputs/logs/manifest-merger-debug-report.txt
@@ -0,0 +1,20 @@
+-- Merging decision tree log ---
+manifest
+ADDED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml:1:1-3:12
+INJECTED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml:1:1-3:12
+	package
+		INJECTED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml
+	xmlns:android
+		ADDED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml:1:11-69
+uses-permission#android.permission.WRITE_EXTERNAL_STORAGE
+ADDED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml:2:1-77
+	android:name
+		ADDED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml:2:18-74
+uses-sdk
+INJECTED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml reason: use-sdk injection requested
+INJECTED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml
+INJECTED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml
+	android:targetSdkVersion
+		INJECTED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml
+	android:minSdkVersion
+		INJECTED from C:\Users\sangw\OneDrive\Desktop\vega-new\Vega\node_modules\@dr.pogodin\react-native-fs\android\src\main\AndroidManifest.xml
diff --git a/node_modules/@dr.pogodin/react-native-fs/android/src/main/java/com/drpogodin/reactnativefs/ReactNativeFsPackage.kt b/node_modules/@dr.pogodin/react-native-fs/android/src/main/java/com/drpogodin/reactnativefs/ReactNativeFsPackage.kt
index 6cda7fd..1d16e7f 100644
--- a/node_modules/@dr.pogodin/react-native-fs/android/src/main/java/com/drpogodin/reactnativefs/ReactNativeFsPackage.kt
+++ b/node_modules/@dr.pogodin/react-native-fs/android/src/main/java/com/drpogodin/reactnativefs/ReactNativeFsPackage.kt
@@ -22,10 +22,11 @@ class ReactNativeFsPackage : BaseReactPackage() {
       moduleInfos[ReactNativeFsModule.NAME] = ReactModuleInfo(
         ReactNativeFsModule.NAME,
         ReactNativeFsModule.NAME,
-        canOverrideExistingModule = false,  // canOverrideExistingModule
-        needsEagerInit = false,  // needsEagerInit
-        isCxxModule = false,  // isCxxModule
-        isTurboModule = true // isTurboModule
+        false,  // canOverrideExistingModule
+        false,  // needsEagerInit
+        false,  // isCxxModule
+        true,   // isTurboModule
+        false   // hasConstants
       )
       moduleInfos
     }
